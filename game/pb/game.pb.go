// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	game.proto

It has these top-level messages:
	Frame
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 双向流包
type Frame struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Frame) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Frame)(nil), "pb.Frame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GameService service

type GameServiceClient interface {
	Stream(ctx context.Context, opts ...client.CallOption) (GameService_StreamClient, error)
}

type gameServiceClient struct {
	c           client.Client
	serviceName string
}

func NewGameServiceClient(serviceName string, c client.Client) GameServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &gameServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *gameServiceClient) Stream(ctx context.Context, opts ...client.CallOption) (GameService_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "GameService.Stream", &Frame{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gameServiceStreamClient{stream}, nil
}

type GameService_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Frame) error
	Recv() (*Frame, error)
}

type gameServiceStreamClient struct {
	stream client.Streamer
}

func (x *gameServiceStreamClient) Close() error {
	return x.stream.Close()
}

func (x *gameServiceStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gameServiceStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gameServiceStreamClient) Send(m *Frame) error {
	return x.stream.Send(m)
}

func (x *gameServiceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GameService service

type GameServiceHandler interface {
	Stream(context.Context, GameService_StreamStream) error
}

func RegisterGameServiceHandler(s server.Server, hdlr GameServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&GameService{hdlr}, opts...))
}

type GameService struct {
	GameServiceHandler
}

func (h *GameService) Stream(ctx context.Context, stream server.Streamer) error {
	return h.GameServiceHandler.Stream(ctx, &gameServiceStreamStream{stream})
}

type GameService_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Frame) error
	Recv() (*Frame, error)
}

type gameServiceStreamStream struct {
	stream server.Streamer
}

func (x *gameServiceStreamStream) Close() error {
	return x.stream.Close()
}

func (x *gameServiceStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gameServiceStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gameServiceStreamStream) Send(m *Frame) error {
	return x.stream.Send(m)
}

func (x *gameServiceStreamStream) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4f, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe4, 0x62, 0x75, 0x2b,
	0x4a, 0xcc, 0x4d, 0x15, 0x92, 0xe0, 0x62, 0x2f, 0x48, 0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x71, 0x8d, 0x0c, 0xb9, 0xb8, 0xdd, 0x13, 0x73, 0x53, 0x83,
	0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x94, 0xb8, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73,
	0x85, 0x38, 0xf5, 0x0a, 0x92, 0xf4, 0xc0, 0xba, 0xa5, 0x10, 0x4c, 0x0d, 0x46, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0x05, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x2e, 0x71, 0xc0, 0x6e, 0x00,
	0x00, 0x00,
}
